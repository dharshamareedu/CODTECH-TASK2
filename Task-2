/* The Hospital Management System is a comprehensive Java-based application designed to streamline the management of hospital operations.
It allows for easy patient registration, appointment scheduling, and electronic health record (EHR) management.
The system also handles billing, invoicing, and inventory management for medical supplies, while offering tools for staff management.
By providing an efficient and user-friendly interface, the system enhances the coordination of various hospital departments, improving patient care and operational efficiency. */

import java.io.*;
import java.util.*;

// Main class for Hospital Management
public class HospitalManagementSystem {

    private List<Patient> patients = new ArrayList<>();
    private List<Doctor> doctors = new ArrayList<>();
    private List<Appointment> appointments = new ArrayList<>();
    private List<EHR> ehrRecords = new ArrayList<>();
    private List<Billing> bills = new ArrayList<>();
    private Inventory inventory = new Inventory();
    private List<Staff> staffMembers = new ArrayList<>();

    public static void main(String[] args) {
        HospitalManagementSystem hms = new HospitalManagementSystem();
        hms.runSystem();
    }

    // Run the system: Main menu to access all modules
    public void runSystem() {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("Welcome to Hospital Management System");
            System.out.println("1. Patient Registration");
            System.out.println("2. Appointment Scheduling");
            System.out.println("3. Electronic Health Records (EHR)");
            System.out.println("4. Billing and Invoicing");
            System.out.println("5. Inventory Management");
            System.out.println("6. Staff Management");
            System.out.println("7. Exit");
            int choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    registerPatient();
                    break;
                case 2:
                    scheduleAppointment();
                    break;
                case 3:
                    manageEHR();
                    break;
                case 4:
                    generateBill();
                    break;
                case 5:
                    manageInventory();
                    break;
                case 6:
                    manageStaff();
                    break;
                case 7:
                    System.out.println("Exiting System. Goodbye!");
                    return;
                default:
                    System.out.println("Invalid choice, try again.");
            }
        }
    }

    // Patient Registration Module
    private void registerPatient() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter Patient Name: ");
        String name = scanner.nextLine();
        System.out.println("Enter Age: ");
        int age = scanner.nextInt();
        System.out.println("Enter Gender: ");
        String gender = scanner.next();
        Patient patient = new Patient(name, age, gender);
        patients.add(patient);
        System.out.println("Patient Registered Successfully: " + patient);
    }

    // Appointment Scheduling Module
    private void scheduleAppointment() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter Patient Name: ");
        String patientName = scanner.nextLine();
        System.out.println("Enter Doctor Name: ");
        String doctorName = scanner.nextLine();
        System.out.println("Enter Appointment Date: ");
        String date = scanner.nextLine();
        Appointment appointment = new Appointment(patientName, doctorName, date);
        appointments.add(appointment);
        System.out.println("Appointment Scheduled Successfully: " + appointment);
    }

    // Electronic Health Records Module
    private void manageEHR() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter Patient Name: ");
        String patientName = scanner.nextLine();
        System.out.println("Enter Health Record Details: ");
        String details = scanner.nextLine();
        EHR ehr = new EHR(patientName, details);
        ehrRecords.add(ehr);
        System.out.println("EHR Updated Successfully for: " + patientName);
    }

    // Billing and Invoicing Module
    private void generateBill() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter Patient Name: ");
        String patientName = scanner.nextLine();
        System.out.println("Enter Treatment Charges: ");
        double charges = scanner.nextDouble();
        Billing bill = new Billing(patientName, charges);
        bills.add(bill);
        System.out.println("Bill Generated Successfully for: " + patientName);
    }

    // Inventory Management Module
    private void manageInventory() {
        inventory.manageSupplies();
    }

    // Staff Management Module
    private void manageStaff() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter Staff Name: ");
        String name = scanner.nextLine();
        System.out.println("Enter Staff Role: ");
        String role = scanner.nextLine();
        Staff staff = new Staff(name, role);
        staffMembers.add(staff);
        System.out.println("Staff Added Successfully: " + staff);
    }
}

// Patient class to manage patient details
class Patient {
    private String name;
    private int age;
    private String gender;

    public Patient(String name, int age, String gender) {
        this.name = name;
        this.age = age;
        this.gender = gender;
    }

    @Override
    public String toString() {
        return "Patient{" + "name='" + name + '\'' + ", age=" + age + ", gender='" + gender + '\'' + '}';
    }
}

// Doctor class
class Doctor {
    private String name;
    private String specialization;

    public Doctor(String name, String specialization) {
        this.name = name;
        this.specialization = specialization;
    }

    @Override
    public String toString() {
        return "Doctor{" + "name='" + name + '\'' + ", specialization='" + specialization + '\'' + '}';
    }
}

// Appointment class
class Appointment {
    private String patientName;
    private String doctorName;
    private String date;

    public Appointment(String patientName, String doctorName, String date) {
        this.patientName = patientName;
        this.doctorName = doctorName;
        this.date = date;
    }

    @Override
    public String toString() {
        return "Appointment{" + "patientName='" + patientName + '\'' + ", doctorName='" + doctorName + '\'' + ", date='" + date + '\'' + '}';
    }
}

// Electronic Health Record class
class EHR {
    private String patientName;
    private String healthDetails;

    public EHR(String patientName, String healthDetails) {
        this.patientName = patientName;
        this.healthDetails = healthDetails;
    }

    @Override
    public String toString() {
        return "EHR{" + "patientName='" + patientName + '\'' + ", healthDetails='" + healthDetails + '\'' + '}';
    }
}

// Billing class
class Billing {
    private String patientName;
    private double charges;

    public Billing(String patientName, double charges) {
        this.patientName = patientName;
        this.charges = charges;
    }

    @Override
    public String toString() {
        return "Billing{" + "patientName='" + patientName + '\'' + ", charges=" + charges + '}';
    }
}

// Inventory class
class Inventory {
    private Map<String, Integer> supplies = new HashMap<>();

    public Inventory() {
        // Adding some default supplies
        supplies.put("Bandages", 100);
        supplies.put("Syringes", 50);
        supplies.put("Gloves", 200);
    }

    public void manageSupplies() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Inventory Management:");
        System.out.println("1. View Supplies");
        System.out.println("2. Add Supply");
        int choice = scanner.nextInt();
        switch (choice) {
            case 1:
                viewSupplies();
                break;
            case 2:
                addSupply();
                break;
            default:
                System.out.println("Invalid choice");
        }
    }

    private void viewSupplies() {
        System.out.println("Current Supplies:");
        for (Map.Entry<String, Integer> entry : supplies.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
    }

    private void addSupply() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter Supply Name: ");
        String name = scanner.nextLine();
        System.out.println("Enter Quantity: ");
        int quantity = scanner.nextInt();
        supplies.put(name, quantity);
        System.out.println("Supply added successfully.");
    }
}

// Staff class to manage hospital staff
class Staff {
    private String name;
    private String role;

    public Staff(String name, String role) {
        this.name = name;
        this.role = role;
    }

    @Override
    public String toString() {
        return "Staff{" + "name='" + name + '\'' + ", role='" + role + '\'' + '}';
    }
}
